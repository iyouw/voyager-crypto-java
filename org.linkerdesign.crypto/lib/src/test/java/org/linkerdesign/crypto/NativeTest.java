/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.linkerdesign.crypto;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.io.UnsupportedEncodingException;
import java.util.Arrays;

class NativeTest {
	@Test void testAesKey() {
		var nat = new Native();
		var res = nat.generateAesKey(256);
		assertTrue(res != null, "aes key is not null");
	}

	@Test void testAesIVGeneration() {
		var nat = new Native();
		var res = nat.generateAesIV();
		assertTrue(res != null, "iv is not null");
		assertTrue(res.length == 16, "iv's length  is 16");
	}

	@Test void testMessageDigest() {
		try {
			var msg = "《青溪》是唐代诗人王维创作的一首五言古诗。此诗描写了一条青溪的幽秀景色，诗人用多彩的画笔，绘出青溪流经不同地方时呈现的不同画面。其中“声喧乱石中，色静深松里”两句，以喧响的声音和幽冷的色调形成闹与静的强烈对比，如同一幅“有声画”。诗的末四句写出诗人心境的闲谈正如清川的闲淡，把自己的精神和自然的精神融和起来，意味隽永。全诗自然清淡素雅，写景抒情皆轻轻松松，然而韵味却隽永醇厚。诗人笔下的青溪是喧闹与沉郁的统一，活泼与安详的揉合，幽深与素静的融和。";
			var bytes = msg.getBytes("UTF-8");
			var nat = new Native() {
				int readLength = 0;

				@Override
				public byte[] readCallback(int length) {
						var size = Math.min(length, bytes.length - readLength);
						if (size == 0) return null;
						return Arrays.copyOfRange(bytes, readLength, readLength += size);
				}
			};

			var hash = nat.digest(64 * 1024, 5);
			assertTrue(hash != null, "hash is not null");
			assertTrue(hash.length == 16, "hash's length is 16");
		} catch (Exception e) {
			assertInstanceOf(UnsupportedEncodingException.class, e, "Unsupported encoding exception");
		}
	}

	@Test void testAesEcryptDecrypt() {
		try {
			var msg = "《青溪》是唐代诗人王维创作的一首五言古诗。此诗描写了一条青溪的幽秀景色，诗人用多彩的画笔，绘出青溪流经不同地方时呈现的不同画面。其中“声喧乱石中，色静深松里”两句，以喧响的声音和幽冷的色调形成闹与静的强烈对比，如同一幅“有声画”。诗的末四句写出诗人心境的闲谈正如清川的闲淡，把自己的精神和自然的精神融和起来，意味隽永。全诗自然清淡素雅，写景抒情皆轻轻松松，然而韵味却隽永醇厚。诗人笔下的青溪是喧闹与沉郁的统一，活泼与安详的揉合，幽深与素静的融和。";
			var bytes = msg.getBytes("UTF-8");
			var enc = new Native() {
				int readLength = 0;

				@Override
				public byte[] readCallback(int length) {
					var size = Math.min(length, bytes.length - readLength);
					if (size == 0) return null;
					return Arrays.copyOfRange(bytes, readLength, readLength += size);
				}
			};

			var key = enc.generateAesKey(256);
			var iv = enc.generateAesIV();
			var enc_msg = enc.aesEncrypt(1024 * 64, key, iv, 2);
			assertTrue(enc_msg != null, "encrypt message is not null");

			var dec = new Native() {
				int readLength = 0;

				@Override
				public byte[] readCallback(int length) {
					var size = Math.min(length, enc_msg.length - readLength);
					if (size == 0) return null;
					return Arrays.copyOfRange(enc_msg, readLength, readLength += size);
				};
			};

			var dec_msg = dec.aesDecrypt(1024 * 64 * 10, key, iv, 2);
			assertTrue(dec_msg != null, "decrypt message is not null");

			var m = new String(dec_msg, "UTF-8");
			assertTrue(msg.equals(m), "msg after encrypt ,decrypt are the same!");
		} catch (Exception e) {
			assertInstanceOf(UnsupportedEncodingException.class, e, "Unsupported encoding exception");
		}
	}
}
